/*
 * Copyright 2011-2014 Asakusa Framework Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
defaultTasks 'clean', 'build', 'install', 'assembleTemplates'

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'

def parentPom = getParentPomDef()
version = parentPom.version
group = parentPom.groupId

configurations {
    deployerJars
}

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    deployerJars 'org.springframework.build.aws:org.springframework.build.aws.maven:3.0.0.RELEASE'
}

project.sourceCompatibility = JavaVersion.toVersion('1.6')
project.targetCompatibility = JavaVersion.toVersion('1.6')

tasks.withType(AbstractCompile) { task ->
    task.options.encoding = 'UTF-8'
}

groovydoc {
    docTitle "Asakusa Gradle Plugins ${version}"
    windowTitle "Asakusa Gradle Plugins ${version}"
    footer "Copyright 2011-${new Date().format('yyyy')} Asakusa Framework Team."
}

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(uploadArchives)) {
        uploadArchives {
            repositories {
                mavenDeployer {
                    configuration = configurations.deployerJars

                    def releaseDef = getMavenServerDef('com.asakusafw.releases')
                    repository(id: 'com.asakusafw.releases', url: 's3://asakusafw/maven/releases') {
                        authentication(userName: releaseDef.username, passphrase: releaseDef.passphrase)
                    }

                    def snapshotDef = getMavenServerDef('com.asakusafw.snapshots')
                    snapshotRepository(id: 'com.asakusafw.snapshots', url: 's3://asakusafw/maven/snapshots') {
                        authentication(userName: snapshotDef.username, passphrase: snapshotDef.passphrase)
                    }
                }
            }
        }
    }
}

def getParentPomDef() {
    def parentPomXml = new XmlSlurper().parse(
            file('../../asakusa-parent/pom.xml'))
    return parentPomXml
}

def getMavenServerDef(String id) {
    def settingsXml = new XmlSlurper().parse(
        new File(System.getProperty("user.home"), ".m2/settings.xml"))
    return settingsXml.servers.server.find {it.id.text() == id}
}

def templateProjectName = 'asakusa-project-template'
def exampleProjectName = 'asakusa-example-project'
def outDir = "${buildDir}/templates"
def outTemplateProjectDir = "${outDir}/${templateProjectName}"
def outExampleProjectDir = "${outDir}/${exampleProjectName}"
def archetypeWorkDir = "${buildDir}/archetype-work"

task generateTemplates << {
    delete outDir
    copy {
        from ("src/templates") {
            include '**/build.gradle'
            expand ([
                repProjectVersion: version,
                repConventionAsakusafwVersion: 'asakusafw.asakusafwVersion',
                repMavenRepoType: version.text().endsWith("SNAPSHOT") ? 'snapshots' : 'releases',
            ])
        }
        from ("src/templates") {
            exclude '**/build.gradle'
        }
        into outDir
    }

    mkdir "${outTemplateProjectDir}/src/main/java"
    mkdir "${outTemplateProjectDir}/src/main/resources"
    mkdir "${outTemplateProjectDir}/src/main/dmdl"
    mkdir "${outTemplateProjectDir}/src/main/libs"
    mkdir "${outTemplateProjectDir}/src/test/java"
    mkdir "${outTemplateProjectDir}/src/test/resources"

    delete archetypeWorkDir
    mkdir archetypeWorkDir
    exec {
        commandLine = ['mvn', 'archetype:generate',
            "-DinteractiveMode=false",
            "-DarchetypeGroupId=${project.group}",
            "-DarchetypeArtifactId=asakusa-archetype-directio",
            "-DarchetypeVersion=${version}",
            "-DgroupId=com.example",
            "-DartifactId=${exampleProjectName}",
            "-Dversion=1.0-SNAPSHOT",
            "-Dpackage=com.example"
        ]
        workingDir = archetypeWorkDir
    }
    copy {
        from ("${archetypeWorkDir}/${exampleProjectName}/src/test/resources") {
            include '*.xml'
        }
        into "${outTemplateProjectDir}/src/test/resources"
    }

    copy {
        from outTemplateProjectDir
        into outExampleProjectDir
    }
    copy {
        from ("${archetypeWorkDir}/${exampleProjectName}/src") {
            exclude "**/example-scripts/"
        }
        into "${outExampleProjectDir}/src"
    }
}

task assembleTemplateProject (dependsOn: 'generateTemplates', type: Tar) {
    from (outDir) {
        include "${templateProjectName}/"
    }
    destinationDir buildDir
    compression Compression.GZIP
    archiveName "${templateProjectName}-${version}.tar.gz"
}

task assembleExampleProject (dependsOn: 'generateTemplates', type: Tar) {
    from (outDir) {
        include "${exampleProjectName}/"
    }
    destinationDir buildDir
    compression Compression.GZIP
    archiveName "${exampleProjectName}-${version}.tar.gz"
}

task assembleTemplates {
    dependsOn assembleTemplateProject, assembleExampleProject
}

task wrapper(type: Wrapper) {
    gradleVersion '1.12'
    jarFile file('.buildtools/gradlew.jar')
}
