/**
 * Copyright 2011-2014 Asakusa Framework Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
options {
    STATIC = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC=false;
    UNICODE_INPUT = true;
    LOOKAHEAD = 1;
    GRAMMAR_ENCODING = "UTF-8";
}

PARSER_BEGIN(JjViewParser)
package com.asakusafw.modelgen.view;

import java.util.*;
import com.asakusafw.modelgen.model.Aggregator;
import com.asakusafw.modelgen.view.model.*;

/**
 * An implementation of the View Parser.
 */
class JjViewParser {

    /**
     * Parse a view definition and return a model object.
     * @param name the name of the view
     * @return the analyzed AST
     * @throws ParseException if input text was not a valid view definition
     */
    CreateView parse(String name) throws ParseException {
        return Start(new Name(name));
    }

    private static String bare(Token t) {
        if (t.image.startsWith("`")) {
            return t.image.substring(1, t.image.length() - 1);
        }
        return t.image;
    }
}
PARSER_END(JjViewParser)


// white spaces
SKIP :
{   " "
|   "\t"
|   "\r"
|   "\n"
}

// reserved words
TOKEN [IGNORE_CASE] :
{   <SELECT: "select">
|   <AS: "as">
|   <FROM: "from">
|   <JOIN: "join">
|   <WHERE: "where">
|   <AND: "and">
|   <GROUP: "group">
|   <BY: "by">
}

// aggregators
TOKEN [IGNORE_CASE]:
{   <COUNT: "count">
|   <SUM: "sum">
|   <MAX: "max">
|   <MIN: "min">
}

// operators, separators
TOKEN :
{   "."
|   ","
|   "="
|   "("
|   ")"
}

// identifier
TOKEN :
{   <ID
    : "`" (~["`"])+ "`"
    | (["A"-"Z", "a"-"z", "_"]["0"-"9", "A"-"Z", "a"-"z", "_"])+
    >
}

/*
CreateView:
    SelectList From
    SelectList From GroupBy
*/
CreateView Start(Name name) :
{
    List<Select> selectList;
    From from;
    List<Name> groupBy;
}
{
    selectList = SelectList()
    from = From()
    (
        groupBy = GroupBy()
    |
        {
            groupBy = Collections.emptyList();
        }
    )
    <EOF>
    {
        return new CreateView(name, selectList, from, groupBy);
    }
}

/*
SelectList:
    "select" Select ( "," Select )*
*/
List<Select> SelectList() :
{
    Select select;
    List<Select> selectList = new ArrayList<Select>();
}
{
    <SELECT>
    select = Select()
    {
        selectList.add(select);
    }
    (
        ","
        select = Select()
        {
            selectList.add(select);
        }
    )*
    {
        return selectList;
    }
}

/*
Select:
    Name
    Name "as" Id
    Aggregator "(" Name ")" "as" Id
*/
Select Select() :
{
    Name name;
    Aggregator aggregator;
    Name id;
}
{
    (
        aggregator = Aggregator()
        "("
        name = Name()
        ")"
    |
        name = Name()
        {
            aggregator = Aggregator.IDENT;
        }
    )
    (
        <AS>
        id = Id()
        {
            return new Select(name, aggregator, id);
        }
    |
        {
            return new Select(name, aggregator, name.getLastSegment());
        }
    )
}

/*
Aggregator: - one of
    "sum"
    "count"
    "min"
    "max"
*/
Aggregator Aggregator() :
{
}
{
    <SUM>
    {
        return Aggregator.SUM;
    }
|
    <COUNT>
    {
        return Aggregator.COUNT;
    }
|
    <MIN>
    {
        return Aggregator.MIN;
    }
|
    <MAX>
    {
        return Aggregator.MAX;
    }
}

/*
From:
    "from" Name
    "from" Name Join
    "from" Name Id
    "from" Name Id Join
*/
From From() :
{
    Name name;
    Name alias = null;
    Join join;
}
{
    <FROM>
    ( "(" )*
    name = Name()
    (
        alias = Id()
    )?
    (
        join = Join()
    |
        {
            join = null;
        }
    )
    {
        return new From(
            name.getLastSegment(),
            alias == null ? null : alias.getLastSegment().token,
            join);
    }
}

/*
Join:
    "join" Name OnList
*/
Join Join() :
{
    Name name;
    Name alias = null;
    List<On> onList;
}
{
    <JOIN>
    name = Name()
    (
        alias = Id()
    )?
    onList = OnList()
    {
        return new Join(
            name.getLastSegment(),
            alias == null ? null : alias.getLastSegment().token,
            onList);
    }
}

/*
OnList:
    "where" On ( "and" On )*
*/
List<On> OnList() :
{
    On on;
    List<On> onList = new ArrayList<On>();
}
{
    ( ")" )*
    <WHERE>
    on = On()
    {
        onList.add(on);
    }
    (
        <AND>
        on = On()
        {
            onList.add(on);
        }
    )*
    {
        return onList;
    }
}

/*
On:
    Name "=" Name
*/
On On() :
{
    Name left;
    Name right;
}
{
    ( "(" )*
    left = Name()
    "="
    right = Name()
    ( ")" )*
    {
        return new On(left, right);
    }
}

/*
GroupBy:
    "group" "by" Name ( "," Name )*
*/
List<Name> GroupBy() :
{
    Name name;
    List<Name> nameList = new ArrayList<Name>();
}
{
    <GROUP>
    <BY>
    name = Name()
    {
        nameList.add(name);
    }
    (
        ","
        name = Name()
        {
            nameList.add(name);
        }
    )*
    {
        return nameList;
    }
}

/*
Name:
    ID
    Name "." ID
*/
Name Name() :
{
    List<Name> names = new ArrayList<Name>();
    Name name;
}
{
    name = Id()
    {
        names.add(name);
    }
    (
        "."
        name = Id()
        {
            names.add(name);
        }
    )*
    {
        if (names.size() == 1) {
            return new Name(names.get(0).token);
        }
        else {
            return new Name(
                names.get(names.size() - 2),
                names.get(names.size() - 1));
        }
    }
}

/*
Id:
    ID
*/
Name Id() :
{
    Token token;
}
{
    token = <ID>
    {
        return new Name(bare(token));
    }
}
