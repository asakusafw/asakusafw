DefaultExcelRuleExtractor.errorInvalidNameType={0}: ({1}, {2})
DefaultExcelRuleExtractor.errorInvalidNullityCondition=invalid value {0}: "{1}" (row={2}, col={3}) expected:{2}
DefaultExcelRuleExtractor.errorInvalidStringCell={0} must be a string: (row={1}, col={2})
DefaultExcelRuleExtractor.errorInvalidTotalCondition=invalid value {0}: "{1}" expected:{2}
DefaultExcelRuleExtractor.errorInvalidValueCondition=invalid value {0}: "{1}" (row={2}, col={3}) expected:{2}
ExcelDataDriver.errorInvalidNumberRange={0} must be between {2}~{3}: {1} (cell=({5}, {6}), id={4})
ExcelDataDriver.errorNotExplicitString=failed to detect the actual type of ({0}, {1}, {2}): please put '' on the top to represent a string value
ExcelDataDriver.errorUnexpectedCellType={0} must be a type of {1}: (cell=({3}, {4}), id={2})
ExcelSheetDataModelSource.errorEmptyProperty=the first row must be a list of property names: (id={0})
ExcelSheetDataModelSource.errorErroneousCell=the cell has error: (pos=({1}, {2}), id={0})
ExcelSheetDataModelSource.errorFailedToResolveFormulaCell=failed to compute cell formula: (pos=({1}, {2}), id={0})
ExcelSheetDataModelSource.errorInvalidHeader=the first row must be a list of property names: (id={0})
ExcelSheetDataModelSource.errorInvalidHeaderCell=the first row must be a list of property names as string type: (id={0}, column={1})
ExcelSheetDataModelSource.errorMissingProperty={0} does not have a property "{1}": (id={2}, column={3})
ExcelSheetDataModelSource.warnSkipEmptyRow=skipped raw that does not have any effective values: (row={1}, id={0})
ExcelSheetRuleProvider.errorInconsistentPropertyType={1} cannot apply to property "{0}": it is only for {2}
ExcelSheetRuleProvider.errorInvalidFormat={0} is malformed
ExcelSheetRuleProvider.errorMissingProperty=missing property (row={0})
ExcelSheetRuleProvider.errorUnknownNullityConstraint=unknown nullity constraint "{1}": {0}
ExcelSheetRuleProvider.errorUnknownValueConstraint=unknown value constraint "{1}": {0}
ExcelSheetRuleProvider.errorUnsupportedOptionalExpression=unsupported optional expression: {0} -> "{1}"
ExcelSheetRuleProvider.infoApply=using Excel sheet as verify rule: {0}
ExcelSheetSinkFactory.errorFailedToCreateOutputDirectory=failed to create an output directory for {0}
ExcelSheetSinkFactory.infoStartOutput=generating job result into {0}
ExcelSheetSinkFactory.warnExceedColumnCount=the data model "{0}" has > {1} properties, so several properties will be omitted to generate {2}
ExcelSheetSinkProvider.infoCreate=using Excel sheet as data model sink: {0}
ExcelSheetSourceProvider.infoApply=using Excel sheet as data model source: {0}
NullityConditionKind.titleAcceptAbsent=if NULL, always success
NullityConditionKind.titleAcceptPresent=if not NULL, always success
NullityConditionKind.titleDenyAbsent=if NULL, always failure
NullityConditionKind.titleDenyPresent=if not NULL, always failure
NullityConditionKind.titleNormal=normal verification
RuleSheetFormat.titleComments=comments
RuleSheetFormat.titleNullityCondition=nullity verification
RuleSheetFormat.titleOption=option
RuleSheetFormat.titlePropertyName=property
RuleSheetFormat.titleTotalCondition=total verification
RuleSheetFormat.titleValueCondition=value verification
TotalConditionKind.titleActual=ignore missing results
TotalConditionKind.titleExpect=ignore extra results
TotalConditionKind.titleIgnore=do not verify
TotalConditionKind.titleIntersect=ignore missing/extra results
TotalConditionKind.titleStrict=verify all results
Util.errorFailedToOpenWorkbook=failed to open Excel workbook: {0}
Util.errorMissingSheetByIndex=failed to open Excel sheet: {0} (missing sheet #{1})
Util.errorMissingSheetByName=failed to open Excel sheet: {0} (missing sheet "{1}")
Util.infoUnsupportedUriFragment=invalid fragment: {0}
ValueConditionKind.titleAny=ignored
ValueConditionKind.titleContain=contains
ValueConditionKind.titleEqual=perfect match
ValueConditionKind.titleExpression=special rule
ValueConditionKind.titleKey=key property
ValueConditionKind.titleNow=current date-time
ValueConditionKind.titleToday=current date
ValueConditionKind.typeAny=all
ValueConditionKind.typeContain=string
ValueConditionKind.typeEqual=all
ValueConditionKind.typeExpression=(special)
ValueConditionKind.typeKey=all
ValueConditionKind.typeNow=date or date-time
ValueConditionKind.typeToday=date or date-time
