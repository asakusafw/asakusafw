AbstractOperatorProcessor.errorMissingAnnotation={0} must be annotated with @{1}
ExecutableAnalyzer.errorInconsistentGroupKeyCount=each grouping key in @Key annotation must have the same number of properties
ExecutableAnalyzer.errorInconsistentGroupKeyType=the grouping key {0}.{1} and {2}.{3} must have the same property type
ExecutableAnalyzer.errorInvalidOrderKey=failed to analyze order in @Key: {0}
ExecutableAnalyzer.errorMissingGroup=@Key annotation must have "group" element
ExecutableAnalyzer.errorUnknownGroupKey=unknown propery "{0}" in @Key(group): {1}
ExecutableAnalyzer.errorUnknownOrderKey=unknown property "{0} in @Key(order): {1}
OperatorClassCollector.errorConflictMethodName={0} must be identical name for other operator methods (case insensitive)
OperatorClassCollector.errorConflictOperatorAnnotation=operator method {0} must not have two or more operator annotations
OperatorClassCollector.errorEnclosedClass=operator class {0} must be a top-level class (not an enclosed class)
OperatorClassCollector.errorFailedToAnalyzeClass=failed to analyze operator class
OperatorClassCollector.errorFailedToAnalyzeMethod=failed to analyze operator method
OperatorClassCollector.errorMissingAnnotation=failed to analyze an annotation about operator {0}
OperatorClassCollector.errorMissingDefaultConstructor=operator class {0} must have a public constructor without any parameters, type parameters or exception types
OperatorClassCollector.errorNotAbstractClass=operator class {0} must be abstract
OperatorClassCollector.errorNotClass=operator class {0} must be a regular class
OperatorClassCollector.errorNotMethod=operator {0} must be a method
OperatorClassCollector.errorNotPublicClass=operator class {0} must be public
OperatorClassCollector.errorNotPublicHelperMethod=method with operator helper annotation must be public
OperatorClassCollector.errorNotPublicMethod=operator method {0} must be public
OperatorClassCollector.errorPublicOtherMethod=operator class must not have public methods except operator methods
OperatorClassCollector.errorStaticMethod=operator method {0} must not be static
OperatorClassCollector.errorThrowsMethod=operator method {0} must not have any exception types
OperatorClassCollector.errorTypeParameterClass=operator class {0} must not have any type parameters
OperatorClassEmitter.errorFailedToCreateOperatorFactory=failed to generate operator factory class about {0} ({1})
OperatorClassEmitter.errorFailedToCreateOperatorImplementation=failed to generate operator implementation class about {0} ({1})
OperatorCompiler.errorDetailHeader=failed to compile operator:
OperatorCompiler.warnSkipConflictProcessor={0}'s target method {1} is already targeted by {2}
OperatorCompiler.warnSkipInvalidProcessor=failed to load processor {0}
OperatorFactoryClassGenerator.javadocClass=An operator factory class about <code>{0}</code>.
OperatorFactoryClassGenerator.javadocFactoryReturn=the created operator object
OperatorFactoryClassGenerator.javadocSetName=Configures the name of this operator.
OperatorFactoryClassGenerator.javadocSetNameNullParameter=if the parameter is <code>null</code>
OperatorFactoryClassGenerator.javadocSetNameParameter=the new operator name
OperatorFactoryClassGenerator.javadocSetNameReturn=this operator object
