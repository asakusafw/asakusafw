BranchOperatorProcessor.errorAbstract=branch operator must not be abstract
BranchOperatorProcessor.errorEmptyEnumResult=branch operator must return enum type which has at least one constants
BranchOperatorProcessor.errorInvalidOptionParameter=user parameter must be a string or primitive type
BranchOperatorProcessor.errorNotEnumResult=branch operator must return public enum type
BranchOperatorProcessor.errorNotModelInput=the first parameter of branch operator must be a data model type
CoGroupOperatorProcessor.errorAbstract=co-group operator must not be abstract
CoGroupOperatorProcessor.errorInvalidAnnotation=failed to resolve annotation
CoGroupOperatorProcessor.errorInvalidOptionParameter=user parameter must be a string or primitive type
CoGroupOperatorProcessor.errorInvalidResult=there must be no "Result" type after any user parameters
CoGroupOperatorProcessor.errorMissingInput=co-group operator must have at least one parameter with "java.util.List<..>" type
CoGroupOperatorProcessor.errorMissingKeyAnnotation=co-group operator parameter must have grouping information using @Key annotation
CoGroupOperatorProcessor.errorMissingOutput=co-group operator must have at least one parameter with "Result<..>" type
CoGroupOperatorProcessor.errorNotListInput=the first parameter of co-group operator must be "java.util.List<..>" type
CoGroupOperatorProcessor.errorNotModelInput=the first parameter of co-group operator must be a "List" of data model type
CoGroupOperatorProcessor.errorNotModelOutput=the result of co-group operator must be a "Result" of data model type
CoGroupOperatorProcessor.errorNotVoidResult=co-group operator must return void
CoGroupOperatorProcessor.errorUnboundOutput=unbound output type "{0}" (must be infer-able from other inputs)
ConvertOperatorProcessor.errorAbstract=convert operator must not be abstract
ConvertOperatorProcessor.errorInvalidAnnotation=failed to resolve annotation
ConvertOperatorProcessor.errorInvalidOptionParameter=user parameter must be a string or primitive type
ConvertOperatorProcessor.errorNotModel=the first parameter of convert operator must be a data model type
ConvertOperatorProcessor.errorNotModelResult=convert operator must return data model type
ConvertOperatorProcessor.javadocInput=input data
ExtractOperatorProcessor.errorInvalidOptionParameter=user parameter must be a string or primitive type
ExtractOperatorProcessor.errorInvalidResult=there must be no "Result" type after any user parameters
ExtractOperatorProcessor.errorNotAbstract=extract operator must not be abstract
ExtractOperatorProcessor.errorNotModelInput=the first parameter of extract operator must be a data model type
ExtractOperatorProcessor.errorNotModelOutput=the result of extract operator must be a "Result" of data model type
ExtractOperatorProcessor.errorNotResultOutput=extract operator must have at least one parameters with "Result" type
ExtractOperatorProcessor.errorNotVoidResult=extract operator must return void
ExtractOperatorProcessor.errorUnboundOutput=unbound output type "{0}" (must be infer-able from other inputs)
FoldOperatorProcessor.errorAbstract=fold operator must not be abstract
FoldOperatorProcessor.errorInconsistentInput=the first and second parameters of fold operator must be the same type
FoldOperatorProcessor.errorInvalidAnnotation=failed to resolve annotation
FoldOperatorProcessor.errorInvalidOptionParameter=user parameter must be a string or primitive type
FoldOperatorProcessor.errorMissingKeyAnnotation=fold operator parameter must have grouping information using @Key annotation
FoldOperatorProcessor.errorNotModelLeft=the first parameter of fold operator must be a data model type
FoldOperatorProcessor.errorNotModelRight=the second parameter of fold operator must be a data model type
FoldOperatorProcessor.errorNotVoid=fold operator must return void
FoldOperatorProcessor.javadocOutput=the folding result
GroupSortOperatorProcessor.errorAbstract=group sort operator must not be abstract
GroupSortOperatorProcessor.errorInvalidAnnotation=failed to resolve annotation
GroupSortOperatorProcessor.errorInvalidOptionParameter=user parameter must be a string or primitive type
GroupSortOperatorProcessor.errorInvalidResult=there must be no "Result" type after any user parameters
GroupSortOperatorProcessor.errorMissingKeyAnnotation=group sort operator parameter must have grouping information using @Key annotation
GroupSortOperatorProcessor.errorMissingOutput=group sortoperator must have at least one parameter with "Result<..>" type
GroupSortOperatorProcessor.errorNotListInput=the first parameter of group sort operator must be "java.util.List<..>" type
GroupSortOperatorProcessor.errorNotModelInput=the first parameter of group sort operator must be a "List" of data model type
GroupSortOperatorProcessor.errorNotModelOutput=the result of group sort operator must be a "Result" of data model type
GroupSortOperatorProcessor.errorNotVoidResult=group sort operator must return void
GroupSortOperatorProcessor.errorUnboundOutput=unbound output type "{0}" (must be infer-able from other inputs)
LoggingOperatorProcessor.errorAbstract=logging operator must not be abstract
LoggingOperatorProcessor.errorInvalidAnnotation=failed to resolve annotation
LoggingOperatorProcessor.errorInvalidOptionParameter=user parameter must be a string or primitive type
LoggingOperatorProcessor.errorNotModelInput=the first parameter of logging operator must be a data model type
LoggingOperatorProcessor.errorNotStringResult=logging operator must return String type
LoggingOperatorProcessor.javadocOptionalBody=<p>Note that, each output port of this operator will automatically connect to "stop" operator if not connected to any other ports.</p>
LoggingOperatorProcessor.javadocOutput=input data
MasterBranchOperatorProcessor.errorAbstract=branch with master operator must not be abstract
MasterBranchOperatorProcessor.errorEmptyEnumResult=branch with master operator must return enum type which has at least one constants
MasterBranchOperatorProcessor.errorInvalidOptionParameter=user parameter must be a string or primitive type
MasterBranchOperatorProcessor.errorMissingKeyAnnotationMaster=branch with master operator parameter must have grouping information using @Key annotation
MasterBranchOperatorProcessor.errorMissingKeyAnnotationTransaction=branch with master operator parameter must have grouping information using @Key annotation
MasterBranchOperatorProcessor.errorNotEnumResult=branch with master operator must return public enum type
MasterBranchOperatorProcessor.errorNotModelInputMaster=the first parameter of branch with master operator must be a data model type
MasterBranchOperatorProcessor.errorNotModelTransaction=the second parameter of branch with master operator must be a data model type
MasterCheckOperatorProcessor.errorExtraParameter=master check operator must not have any user parameters
MasterCheckOperatorProcessor.errorInvalidAnnoation=failed to resolve annotation
MasterCheckOperatorProcessor.errorMissingKeyAnnotationMaster=master check operator parameter must have grouping information using @Key annotation
MasterCheckOperatorProcessor.errorMissingKeyAnnotationTransaction=master check operator parameter must have grouping information using @Key annotation
MasterCheckOperatorProcessor.errorNotAbstract=master check operator must be abstract
MasterCheckOperatorProcessor.errorNotBooleanResult=master check operator must return boolean type
MasterCheckOperatorProcessor.errorNotModelMaster=the first parameter of master check operator must be a data model type
MasterCheckOperatorProcessor.errorNotModelTransaction=the second parameter of master check operator must be a data model type
MasterCheckOperatorProcessor.javadocFound=each data model object from {1} which has corresponding master data in {0}
MasterCheckOperatorProcessor.javadocMissed=each data model object from {1} which does not have corresponding master data in {0}
MasterCheckOperatorProcessor.messageMethodBody=master check operator does not have method body
MasterJoinOperatorProcessor.errorExtraParameter=master join operator must not have any user parameters
MasterJoinOperatorProcessor.errorGeneric=master join operator must not have any type parameters
MasterJoinOperatorProcessor.errorInvalidAnnotation=failed to resolve annotation
MasterJoinOperatorProcessor.errorNotAbstract=master join operator must be abstract
MasterJoinOperatorProcessor.errorNotJoinedModel=the return type of master join operator must be a joined model of each parameter type
MasterJoinOperatorProcessor.errorNotModelMaster=the first parameter of master join operator must be a data model type
MasterJoinOperatorProcessor.errorNotModelResult=master join operator must return a data model type
MasterJoinOperatorProcessor.errorNotModelTransaction=the second parameter of master join operator must be a data model type
MasterJoinOperatorProcessor.javadocMissing=each data model object which does not have corresponding master data
MasterJoinOperatorProcessor.messageMethodBody=master join operator does not have method body
MasterJoinUpdateOperatorProcessor.errorAbstract=update with master operator must not be abstract
MasterJoinUpdateOperatorProcessor.errorInvalidAnnotation=failed to resolve annotation
MasterJoinUpdateOperatorProcessor.errorInvalidOptionParameter=user parameter must be a string or primitive type
MasterJoinUpdateOperatorProcessor.errorMissingKeyAnnotationMaster=update with master operator parameter must have grouping information using @Key annotation
MasterJoinUpdateOperatorProcessor.errorMissingKeyAnnotationTransaction=update with master operator parameter must have grouping information using @Key annotation
MasterJoinUpdateOperatorProcessor.errorNotModelMaster=the first parameter of update with master operator must be a data model type
MasterJoinUpdateOperatorProcessor.errorNotModelTransaction=the second parameter of update with master operator must be a data model type
MasterJoinUpdateOperatorProcessor.errorNotVoidResult=update with master operator must return void
MasterJoinUpdateOperatorProcessor.javadocJoined=each data model object which is successfully updated
MasterJoinUpdateOperatorProcessor.javadocMissed=each data model object which does not have corresponding master data
MasterKindOperatorAnalyzer.errorExtraSelectorParameter=master selection method "{0}" must have number of parameters less than or equals to this operator
MasterKindOperatorAnalyzer.errorInconsistentSelectorMasterType=the first parameter of master selection method "{0}" must be a List of {1}
MasterKindOperatorAnalyzer.errorInconsistentSelectorOptionParameter=the parameter #{2} of master selection method "{0}" must be a super-type of {1}
MasterKindOperatorAnalyzer.errorInvalidSelectorMaster=the first parameter of the master selection method "{0}" must be the form of "List<{1}>"
MasterKindOperatorAnalyzer.errorInvalidSelectorMasterContainer=the first parameter of master selection method "{0}" must be the form of "List<...>"
MasterKindOperatorAnalyzer.errorInvalidSelectorMasterTypeArgument=the first parameter of master selection method "{0}" must be the form of "List<...>"
MasterKindOperatorAnalyzer.errorInvalidSelectorResult=the return type of master selection method "{0}" must be a subtype of {1}
MasterKindOperatorAnalyzer.errorInvalidSelectorTransaction=the second parameter of master selection method "{0}" must be a super-type of {1}
MasterKindOperatorAnalyzer.errorMissingSelectorAnnotation=master selection method "{0}" must be annotated with @{1}
MasterKindOperatorAnalyzer.errorMissingSelectorMethod=missing master selection method "{0}"
OperatorProcessorUtil.errorConflictPortName=conflict port name: {0}
OperatorProcessorUtil.errorInvalidPortName=invalid port name: {0}
SplitOperatorProcessor.errorExtraParameter=split operator must not have any user parameters
SplitOperatorProcessor.errorGeneric=split operator must not have any type parameters
SplitOperatorProcessor.errorNotAbstract=split operator must be abstract
SplitOperatorProcessor.errorNotJoinedModel=the first parameter of split operator must be a joined model of each parameter type
SplitOperatorProcessor.errorNotModelInput=the first parameter of split operator must be a data model type
SplitOperatorProcessor.errorNotModelOutput=the parameter #{0} of split operator must be a "Result" of data model type
SplitOperatorProcessor.errorNotResultOutput=the parameter #{0} of split operator must be "Result<..>" type
SplitOperatorProcessor.errorNotVoid=split operator must return void
SplitOperatorProcessor.messageMethodBody=split operator does not have method body
SummarizeOperatorProcessor.errorExtraParameter=summarize operator must not have any user parameters
SummarizeOperatorProcessor.errorGeneric=summarize operator must not have any type parameters
SummarizeOperatorProcessor.errorInvalidAnnotation=failed to resolve annotation
SummarizeOperatorProcessor.errorNotAbstract=summarize operator must be abstract
SummarizeOperatorProcessor.errorNotModelInput=the first parameter of summarize operator must be a data model type
SummarizeOperatorProcessor.errorNotModelResult=summarize operator must return data model type
SummarizeOperatorProcessor.errorNotSummarizedModel=the return type of summarize operator must be a summarized model of the first parameter type
SummarizeOperatorProcessor.messageMethodBody=summarize operator does not have method body
UniqueOperatorProcessor.errorExtraParameter=unique operator must not have any user parameters
UniqueOperatorProcessor.errorMissingKeyAnnotation=unique operator parameter must have group information using @Key annotation
UniqueOperatorProcessor.errorNotAbstract=unique operator must be abstract
UniqueOperatorProcessor.errorNotModel=the first parameter of unique operator must be a data model type
UniqueOperatorProcessor.errorNotVoid=unique operator must return void
UniqueOperatorProcessor.javadocDuplicated=output of non-unique data model objects
UniqueOperatorProcessor.javadocUnique=output of unique data model objects
UniqueOperatorProcessor.messageMethodBody=unique operator does not have method body
UpdateOperatorProcessor.errorAbstract=update operator must not be abstract
UpdateOperatorProcessor.errorInvalidAnnotation=failed to resolve annotation
UpdateOperatorProcessor.errorInvalidOptionOptionParameter=user parameter must be a string or primitive type
UpdateOperatorProcessor.errorNotModelInput=the first parameter of update operator must be a data model type
UpdateOperatorProcessor.errorNotVoidResult=update operator must return void
UpdateOperatorProcessor.javadocOutput=the results
