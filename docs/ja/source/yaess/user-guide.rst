===================
YAESSユーザーガイド
===================

この文書では、YAESSの利用方法について紹介します。
YAESSの導入方法については :doc:`../administration/deployment-with-windgate` のYAESSに関する項目を参照してください。

プロファイルセット
==================
YAESSはHadoopクラスタや複数の外部システムなどを組み合わせた複雑な環境上で、Asakusaのバッチを実行するために設計されています。
それぞれの環境に対するジョブ起動方法の設定や、YAESSそのものの設定をまとめて「プロファイルセット」と呼んでいます。

このプロファイルセットは、 ``$ASAKUSA_HOME/yaess/conf/yaess.properties`` (以降、「構成ファイル」)でまとめて管理されています。
このファイルはJavaの一般的なプロパティファイルの文法で、主に下記のセクションから成り立っています。

..  list-table:: プロパティファイルの項目
    :widths: 10 60
    :header-rows: 1

    * - セクション
      - 内容
    * - ``core``
      - YAESS内部用の設定。通常は変更しない。
    * - ``hadoop``
      - Hadoopに関するジョブの実行方法に関する設定
    * - ``command``
      - Hadoop以外のジョブの実行方法に関する設定
    * - ``lock``
      - バッチ実行時のロックに関する設定
    * - ``monitor``
      - バッチ実行時の監視に関する設定
    * - ``scheduler``
      - バッチに含まれるジョブのスケジューリングに関する設定

プロパティファイルのそれぞれのセクションには、該当するセクション名から始まるキーと、それに対応する値が記述されています。
この文書では、主に ``hadoop`` と ``command`` セクションについて紹介します。


YAESS本体の設定
---------------
YAESS本体の設定は、構成ファイル内の ``core`` セクション内に記述します。

..  list-table:: YAESS本体の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``core``
      - ``com.asakusafw.yaess.basic.BasicCoreProfile``
    * - ``core.version``
      - ``0.1``

上記の値は変更しないようにしてください。


Hadoopジョブの実行
------------------
Asakusa Frameworkで開発したバッチは、内部的にHadoopのジョブを投入してさまざまな処理を行っています。
YAESS上でHadoopに関する設定を行うには、構成ファイル内の ``hadoop`` セクションの内容を編集します。


同一環境上のHadoopジョブを実行する
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
YAESSを起動したコンピューターと同一のコンピューターにインストールされたHadoopを利用する場合、構成ファイルの ``hadoop`` セクションに以下の内容を設定します。

..  list-table:: 同一環境上のHadoopを実行する際の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``hadoop``
      - ``com.asakusafw.yaess.basic.BasicHadoopScriptHandler``
    * - ``hadoop.env.HADOOP_HOME``
      - Hadoopのインストール先
    * - ``hadoop.env.ASAKUSA_HOME``
      - Asakusa Frameworkのインストール先

上記のうち、 ``hadoop.env.`` から始まる項目には ``${変数名}`` という形式 [#]_ で、YAESSを起動した環境の環境変数を含められます。
ここでは同一環境上のHadoopを利用する設定ですので、 ``hadoop.env.HADOOP_HOME`` には ``${HADOOP_HOME}`` を、
``hadoop.env.ASAKUSA_HOME`` には ``${ASAKUSA_HOME}`` をそれぞれ指定すれば、現在の環境変数をそのまま利用できます。

..  [#] 現在の仕様では、 ``$ASAKUSA_HOME`` のように ``{`` と ``}`` に囲まれていない形式は利用できません。


SSHを経由してHadoopジョブを実行する
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
YAESSからSSHを経由してリモートコンピューター上のHadoopを利用する場合、構成ファイルの ``hadoop`` セクションに以下の内容を設定します。

..  list-table:: SSHを経由してHadoopを実行する際の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``hadoop``
      - ``com.asakusafw.yaess.jsch.SshHadoopScriptHandler``
    * - ``hadoop.ssh.user``
      - ログイン先のユーザー名
    * - ``hadoop.ssh.host``
      - SSHのリモートホスト名
    * - ``hadoop.ssh.port``
      - SSHのリモートポート番号
    * - ``hadoop.ssh.privateKey``
      - ローカルの秘密鍵の位置
    * - ``hadoop.ssh.passPhrase``
      - 秘密鍵のパスフレーズ
    * - ``hadoop.env.HADOOP_HOME``
      - リモートのHadoopのインストール先
    * - ``hadoop.env.ASAKUSA_HOME``
      - リモートのAsakusa Frameworkのインストール先

上記のうち、 ``hadoop.ssh.user`` , ``hadoop.ssh.privateKey`` および  ``hadoop.env.`` から始まる項目には ``${変数名}`` という形式で環境変数を含められます。
たとえば、 ``hadoop.ssh.privateKey`` は通常 ``${HOME}/.ssh/id_rsa`` を指定します。

なお、この仕組みではSSHでの通信に JSch [#]_ を利用しています。

..  [#] http://www.jcraft.com/jsch/


Hadoopを利用する際の環境変数の設定
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hadoopを利用する際に特別な環境変数が必要な場合、以下の設定を追加します。

..  list-table:: Hadoopを利用する際の環境変数の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``hadoop.env.<環境変数名>``
      - 設定する環境変数の値

ここで指定する値には、 ``${変数名}`` という形式で、YAESSを起動した環境の環境変数を含められます。

..  note::
    ``hadoop.env.HADOOP_HOME`` や ``hadoop.env.ASAKUSA_HOME`` は上記の一部です。
    ただし、これらの環境変数はHadoopの実行に必要であるため、常に指定するようにしてください。

..  note::
    ``hadoop.env.<環境変数名>=${<環境変数名>}`` のように書くと、現在の環境変数を対象の環境にそのまま受け渡せます。


Hadoopブリッジの設定
~~~~~~~~~~~~~~~~~~~~
`同一環境上のHadoopジョブを実行する`_ 場合や、 `SSHを経由してHadoopジョブを実行する`_ 場合には、Hadoopがインストールされた環境上に ``$ASAKUSA_HOME/yaess-hadoop`` というディレクトリが必要です。
このディレクトリ下にはYAESSがHadoopにジョブを投入する際に利用する「Hadoopブリッジ」というツールが格納されています。
HadoopブリッジはAsakusa Frameworkに含まれていますが、リモートの環境上には手動でインストールする必要があります。

YAESSからHadoopを起動する際には、Hadoopが提供するコマンドを直接実行するのではなく、代わりに ``$ASAKUSA_HOME/yaess-hadoop/bin/hadoop-execute.sh`` というシェルスクリプトを実行します。
この中では最終的にHadoopのコマンドを実行するのですが、その手前でAsakusa Frameworkのための設定をいくつか行っています。

このシェルスクリプトの中では、 ``$ASAKUSA_HOME/yaess-hadoop/conf/env.sh`` というシェルスクリプトを内部的に実行しています。
これは ``hadoop-execute.sh`` と同一プロセス内で実行され、ここで環境変数を設定するとHadoop実行時の環境変数を設定できます。

YAESSの構成ファイル側で設定しきれない環境変数等がある場合には、こちらで設定してください。


ジョブフロー中間ファイルのクリーンアップ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ジョブフローの実行が完了すると、その実行中に生成された中間ファイルは通常の場合に不要となります。
以下の設定を行うことで、ジョブフローの完了時 [#]_ にそれらの中間ファイルを削除できます。

..  list-table:: ジョブフローのワーキングディレクトリの設定
    :widths: 10 20
    :header-rows: 1

    * - 名前
      - 値
    * - ``hadoop.workingDirectory``
      - ジョブフローごとの中間ファイルのディレクトリパス

通常この値には ``target/hadoopwork/${execution_id}`` を指定します。
バッチアプリケーションのコンパイル時に指定した「クラスターワーキングディレクトリ」の値を指定してください。

なお、 ``hadoop.workingDirectory`` 内では以下の変数のみを利用できます。

..  list-table:: パスに利用可能な変数の一覧
    :widths: 10 15
    :header-rows: 1

    * - 変数
      - 値
    * - ``${batch_id}``
      - バッチID
    * - ``${flow_id}``
      - フローID
    * - ``${execution_id}``
      - 実行ID


..  [#] 実際には、これは ``cleanup`` フェーズ内で行われます。
        そのため、ジョブフローの途中で異常終了した場合には、クリーンアップは行われません。


Hadoopジョブ実行への介入
~~~~~~~~~~~~~~~~~~~~~~~~
Hadoopのジョブを起動する際に、YAESSはHadoopがインストールされた環境の ``$ASAKUSA_HOME/yaess-hadoop/bin/hadoop-execute.sh`` というシェルスクリプトを実行しています。
このシェルスクリプトを実行する際に、以下の引数を指定しています。

..  list-table:: Hadoopジョブ実行時の引数一覧
    :widths: 5 30
    :header-rows: 1

    * - 位置
      - 内容
    * - 1
      - ジョブクライアントクラス名
    * - 2
      - バッチID
    * - 3
      - フローID
    * - 4
      - 実行ID
    * - 5
      - バッチ実行引数 (文字列形式)
    * - 以降
      - その他のHadoopへの引数一覧

つまり、ジョブクライアントクラス名が ``Client`` , バッチIDが ``bid`` , フローIDが ``fid`` , 実行IDが ``eid`` である場合、ジョブ実行時のコマンドは

..  code-block:: sh

    $ASAKUSA_HOME/yaess-hadoop/bin/hadoop-execute.sh Client bid fid eid

となります。

YAESSでは、このコマンドラインを構成するルールに対して、以下の設定で介入できます。

..  list-table:: コマンドライン介入の設定 (Hadoopジョブ)
    :widths: 10 20
    :header-rows: 1

    * - 名前
      - 値
    * - ``hadoop.command.0``
      - 先頭に挿入されるトークン
    * - ``hadoop.command.1``
      - 2番目に挿入されるトークン
    * - ``hadoop.command.<n>``
      - ``n + 1`` 番目に挿入されるトークン

つまり、 ``hadoop.command.0`` に ``C:\\Cygwin\\bin\\bash.exe`` , ``hadoop.command.1`` に ``-r`` と指定した場合、先ほどの例は

..  code-block:: sh

    C:\Cygwin\bin\bash.exe -r $ASAKUSA_HOME/yaess-hadoop/bin/hadoop-execute.sh Client bid fid eid

となります。

また、それぞれの値には、 ``${変数名}`` の形式で環境変数を、 ``@[位置]`` の形式で元のコマンドラインの指定位置(0起算)のトークンを利用できます。
このとき、 ``@[0]`` は ``$ASAKUSA_HOME/yaess-hadoop/bin/hadoop-execute.sh`` をさし、 ``@[1]`` はジョブクライアントクラス名をさし、といった具合になります。


クリーンアップ実行への介入
~~~~~~~~~~~~~~~~~~~~~~~~~~
`Hadoopジョブ実行への介入`_ と同様に、 `ジョブフロー中間ファイルのクリーンアップ`_ 実行時のコマンドに対しても介入を行えます。
クリーンアップを行う際には、YAESSはHadoopがインストールされた環境の ``$ASAKUSA_HOME/yaess-hadoop/bin/hadoop-cleanup.sh`` というシェルスクリプトを実行しています。
このシェルスクリプトを実行する際に、以下の引数を指定しています。

..  list-table:: Hadoopジョブ実行時の引数一覧
    :widths: 5 20
    :header-rows: 1

    * - 位置
      - 内容
    * - 1
      - ``hadoop.workingDirectory`` の内容
    * - 2
      - バッチID
    * - 3
      - フローID
    * - 4
      - 実行ID
    * - 5
      - バッチ実行引数 (文字列形式)
    * - 以降
      - その他のHadoopへの引数一覧

このコマンドラインを構成するルールに介入するには、以下のように設定を行います。
YAESSでは、このコマンドラインを構成するルールに対して、以下の設定で介入できます。

..  list-table:: コマンドライン介入の設定 (クリーンアップ)
    :widths: 10 20
    :header-rows: 1

    * - 名前
      - 値
    * - ``hadoop.cleanup.0``
      - 先頭に挿入されるトークン
    * - ``hadoop.cleanup.1``
      - 2番目に挿入されるトークン
    * - ``hadoop.cleanup.<n>``
      - ``n + 1`` 番目に挿入されるトークン

``hadoop.command.<n>`` と同様に、 ``${変数名}`` や、 ``@[位置]`` も利用できます。


コマンドラインジョブの実行
--------------------------
ThunderGateやWindGateなどのHadoop以外のジョブについては、YAESSでは「コマンドラインジョブ」と総称しています。
コマンドラインジョブにはHadoopのジョブと異なり、「プロファイル」という概念があります。

これは、それぞれのジョブが「どの環境で実行されるか」ということをあらわすもので [#]_ 、
ThunderGateでは「ターゲット名」、WindGateでは「プロファイル名」で指定したものが利用されます。

YAESS上でコマンドラインジョブの設定を行うには、構成ファイル内の ``command`` セクションの内容を編集します。
さらに、プロファイルごとに ``command.<プロファイル名>`` のサブセクションを作成し、その中に各種設定を記述します。

..  [#] 現在のAsakusa Frameworkは、Hadoopクラスターがひとつしかないという前提で動作します。
    そのため、こちらには特定のプロファイルという概念が存在しません。


プロファイルの引き当て
~~~~~~~~~~~~~~~~~~~~~~
構成ファイル内に ``command.<プロファイル名>`` というサブセクションを記載した場合、
``<プロファイル名>`` の部分に指定した文字列と同じプロファイルを利用するコマンドラインジョブは、
そのサブセクションの構成を利用して実行します。

プロファイルに対応するサブセクションが存在しない場合、そのコマンドラインジョブは
``command.*`` というサブセクションに記載した構成を利用して実行します。

例として、ThunderGateを利用する際にターゲット名に ``asakusa`` を指定した場合、
``command.asakusa`` というサブセクションで設定した内容が適用されます。
そのサブセクションがない場合には、 ``command.*`` というサブセクションの内容が適用されます。

..  attention::
    上記のいずれのサブセクションも存在しない場合、YAESSはエラーとなります。


同一環境上でコマンドラインジョブを実行する
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
YAESSを起動したコンピューターと同一のコンピューターでコマンドラインジョブを実行するには、構成ファイルの ``command.<プロファイル名>`` セクションに以下の内容を設定します。

..  list-table:: 同一環境上でコマンドラインを実行する際の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``command.<プロファイル名>``
      - ``com.asakusafw.yaess.basic.BasicCommandScriptHandler``
    * - ``command.<プロファイル名>.env.ASAKUSA_HOME``
      - Asakusa Frameworkのインストール先

上記のうち、 ``command.<プロファイル名>.env.ASAKUSA_HOME`` には ``${変数名}`` という形式で、YAESSを起動した環境の環境変数を含められます。
ここでは同一環境上でコマンドラインジョブを実行するので、 ``${ASAKUSA_HOME}`` を指定すれば、現在の環境変数をそのまま利用できます。

SSHを経由してコマンドラインジョブを実行する
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
YAESSからSSHを経由し、リモートコンピューター上でコマンドラインジョブを実行するには、構成ファイルの ``command.<プロファイル名>`` セクションに以下の内容を設定します。

..  list-table:: SSHを経由してコマンドラインを実行する際の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``command.<プロファイル名>``
      - ``com.asakusafw.yaess.jsch.SshCommandScriptHandler``
    * - ``command.<プロファイル名>.ssh.user``
      - ログイン先のユーザー名
    * - ``command.<プロファイル名>.ssh.host``
      - SSHのリモートホスト名
    * - ``command.<プロファイル名>.ssh.port``
      - SSHのリモートポート番号
    * - ``command.<プロファイル名>.ssh.privateKey``
      - ローカルの秘密鍵の位置
    * - ``command.<プロファイル名>.ssh.passPhrase``
      - 秘密鍵のパスフレーズ
    * - ``command.<プロファイル名>.env.ASAKUSA_HOME``
      - リモートのAsakusa Frameworkのインストール先

上記のうち、 ``command.<プロファイル名>.ssh.user`` , ``command.<プロファイル名>.ssh.privateKey`` および  ``command.<プロファイル名>.env.ASAKUSA_HOME`` には ``${変数名}`` という形式で環境変数を含められます。
たとえば、 ``hadoop.ssh.privateKey`` は通常 ``${HOME}/.ssh/id_rsa`` を指定します。

なお、 `SSHを経由してHadoopジョブを実行する`_ 際と同様に、SSHでの通信に JSch を利用しています。

コマンドラインジョブを実行する際の環境変数の設定
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
コマンドラインジョブを実行する際に環境変数が必要な場合、以下の設定を追加します。

..  list-table:: コマンドラインジョブを実行する際の環境変数の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``command.<プロファイル名>.env.<環境変数名>``
      - 設定する環境変数の値

ここで指定する値には、 ``${変数名}`` という形式で、YAESSを起動した環境の環境変数を含められます。

..  note::
    ``command.<プロファイル名>.env.ASAKUSA_HOME`` は上記の一部です。
    ただし、これらの環境変数はコマンドラインジョブの実行に必要であるため、常に指定するようにしてください。



コマンドラインジョブ実行への介入
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
YAESSがコマンドラインジョブを実行する際には、そのジョブのコマンドラインを指定の環境上で直接実行しています [#]_ 。
このコマンドラインに対して、以下の設定で介入できます。

..  list-table:: コマンドライン介入の設定 (コマンドラインジョブ)
    :widths: 10 10
    :header-rows: 1

    * - 名前
      - 値
    * - ``command.<プロファイル名>.command.0``
      - 先頭に挿入されるトークン
    * - ``command.<プロファイル名>.command.1``
      - 2番目に挿入されるトークン
    * - ``command.<プロファイル名>.command.<n>``
      - ``n + 1`` 番目に挿入されるトークン

たとえば、もとのコマンドラインが ``/bin/echo`` , ``hello`` で、
``command.<プロファイル名>.command.0`` に ``C:\\Cygwin\\bin\\bash.exe`` , ``command.<プロファイル名>.command.1`` に ``-r`` と指定した場合、実際に実行されるコマンドは

..  code-block:: sh

    C:\Cygwin\bin\bash.exe -r /bin/echo hello

となります。

また、それぞれの値には、 ``${変数名}`` の形式で環境変数を、 ``@[位置]`` の形式で元のコマンドラインの指定位置(0起算)のトークンをそれぞれ利用できます。
このとき、 ``@[0]`` はコマンドラインの実行可能ファイルパスをさし、 ``@[1]`` はコマンドラインの最初の引数といった具合になります。

..  [#] より詳しく言えば、環境上のコマンドラインシェルに、ジョブのコマンドラインをそのまま渡してプロセスを起動します。


ジョブのスケジューリング
------------------------
Asakusa Frameworkのバッチは次のような構造をしています。

..  list-table:: バッチの構造
    :widths: 10 20
    :header-rows: 1

    * - 名前
      - 値
    * - バッチ
      - バッチ全体
    * - フロー
      - バッチ内のトランザクション単位
    * - フェーズ
      - フロー内の処理内容の段階
    * - ジョブ
      - フェーズ内の個々の実行単位

それぞれのフェーズには複数のジョブが定義されていて、またそれぞれのジョブには実行順序の依存関係があります。
YAESSはバッチを実行する際、各フェーズ内のジョブの実行順序等を、構成ファイルの ``schedule`` セクションで指定できます。


もっとも単純なスケジューリング
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
もっとも単純なジョブのスケジューリングでは、それぞれのジョブを依存関係の順に1つずつ実行します。
構成ファイルの ``schedule`` セクションに以下の内容を指定します。

..  list-table:: 単純なジョブのスケジューリングを行う際の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``scheduler``
      - ``com.asakusafw.yaess.basic.BasicJobScheduler``


ジョブを並列実行する際のスケジューリング
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
依存関係を考慮しながら複数のジョブを同時に実行する場合、構成ファイルの ``schedule`` セクションに以下の内容を指定します。

..  list-table:: ジョブを並列実行する際の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``scheduler``
      - ``com.asakusafw.yaess.paralleljob.ParallelJobScheduler``
    * - ``scheduler.parallel.default``
      - 同時に実行可能なジョブの個数

また、ジョブの種類ごとに同時に動作させるジョブの個数を設定することも可能です。
この場合、構成ファイルに以下の内容を追加します。

..  list-table:: 種類ごとにジョブを並列実行する際の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``hadoop.resource``
      - Hadoopジョブ [#]_ のリソース名
    * - ``command.<プロファイル名>.resource``
      - コマンドラインジョブ [#]_ のリソース名
    * - ``scheduler.parallel.<リソース名>``
      - 指定のリソース名のジョブに対する同時実行可能な数

上記の指定により、たとえばHadoopジョブの並列度を1に設定しながら、ThunderGateのジョブの並列度を3に設定する、などが可能です。

なお、リソース名に対して ``scheduler.parallel.<リソース名>`` の指定が存在しない場合、代わりに ``scheduler.parallel.default`` の設定を利用します。

..  note::
    つまり、 ``default`` という名前のリソース名はYAESS内で特別扱いされています。
    通常はこの名前をリソース名に使用しないでください。


..  [#] `Hadoopジョブの実行`_ を参照
..  [#] `コマンドラインジョブの実行`_ を参照


バッチ実行のロック
------------------
YAESSではバッチを実行する際に、ほかのバッチの実行を抑制するロックの仕組みが用意されています。
YAESS上でHadoopに関する設定を行うには、構成ファイル内の ``lock`` セクションの内容を編集します。

..  note::
    現在のYAESSには、 `同一環境上のバッチ実行を抑制するロック`_ のみが用意されています。


同一環境上のバッチ実行を抑制するロック
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
YAESSを実行中のコンピューターで、ほかのYAESSの実行を抑制するには、構成ファイルの ``lock`` セクションに以下の内容を指定します。

..  list-table:: 同一環境上のバッチ実行を抑制する際の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``lock``
      - ``com.asakusafw.yaess.basic.BasicLockProvider``
    * - ``lock.directory``
      - ロックファイルの保存先パス

上記のうち、 ``lock.directory`` には ``${変数名}`` という形式で、YAESSを起動した環境の環境変数を含められます。


ロックのスコープ
~~~~~~~~~~~~~~~~
ロックには実行を抑制する範囲を表す「スコープ」を指定できます。
これには、構成ファイルの ``lock`` セクションに以下の内容を追加します。

..  list-table:: ロックのスコープを指定する際の設定
    :widths: 10 20
    :header-rows: 1

    * - 名前
      - 値
    * - ``lock.scope``
      - スコープの種類

スコープの種類には以下のものがあります。

..  list-table:: ロックスコープの種類
    :widths: 10 60
    :header-rows: 1

    * - スコープ
      - 値
    * - ``world``
      - バッチ実行中は他の任意のバッチを同時に実行しない
    * - ``batch``
      - 同じバッチを同時に2つ以上実行しない
    * - ``flow``
      - 同じジョブフローを同時に2つ以上実行しない
    * - ``execution``
      - 同じ実行IDのジョブフローを同時に2つ以上実行しない

なお、スコープの指定がない場合、 ``execution`` が指定された場合と同様の動きをします。


バッチ実行のモニタ
------------------
YAESSには、実行中のバッチの進捗状況を監視したり、またはその実行をキャンセルしたりするためのモニターの機能が提供されています。
このモニタに関する設定を行うには、構成ファイル内の ``monitor`` セクションの内容を編集します。

..  note::
    現在のYAESSには、 `進捗ログを出力するモニタ`_ のみが用意されています。

進捗ログを出力するモニタ
~~~~~~~~~~~~~~~~~~~~~~~~
バッチ内のそれぞれのフェーズ [#]_ の進捗状況をログに出力するには、構成ファイルの ``monitor`` セクションに以下の内容を設定します。

..  list-table:: 進捗ログを出力するモニタを利用する際の設定
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``monitor``
      - ``com.asakusafw.yaess.basic.BasicMonitorProvider``
    * - ``monitor.stepUnit``
      - ログを出力する進捗の単位 (0.0 ~ 1.0)

``monitor.stepUnit`` は、フェーズの進捗度が変化した際に、ログに出力する単位です。
この値は0以上1以下で指定し、進捗度が指定された単位を超えた際にログに状態を出力します (0が指定された場合にはログを出力しません)。
たとえば、この値に ``0.05`` と指定した場合、進捗ログは最低でも5%単位になります。

このモニタは、YAESS本体のログ設定を利用してログを出力しています。
YAESS本体のログ設定は `YAESSのログ設定`_ を参照してください。

..  [#] `ジョブのスケジューリング`_ を参照


その他のYAESSの設定
-------------------
構成ファイルのほかにも、いくつかYAESSの実行に関する設定があります。

YAESSの環境変数設定
~~~~~~~~~~~~~~~~~~~
YAESSの実行に特別な環境変数を利用する場合、 ``$ASAKUSA_HOME/yaess/conf/env.sh`` 内でエクスポートして定義できます。

YAESSを利用する場合、以下の環境変数が必要です。

..  list-table:: WindGateの実行に必要な環境変数
    :widths: 10 60
    :header-rows: 1

    * - 名前
      - 備考
    * - ``ASAKUSA_HOME``
      - Asakusaのインストール先パス。

特別な理由がない限り、 ``ASAKUSA_HOME`` はYAESSを実行する前にあらかじめ定義しておいてください。
``$ASAKUSA_HOME/yaess/conf/env.sh`` では、その他必要な環境変数を定義するようにしてください。


YAESSのログ設定
~~~~~~~~~~~~~~~
YAESSは内部のログ表示に ``SLF4J`` [#]_ 、およびバックエンドに ``Logback`` [#]_ を利用しています。
ログの設定を変更するには、 ``$ASAKUSA_HOME/yaess/conf/logback.xml`` を編集してください。

また、YAESSの実行時には以下の値がシステムプロパティとして設定されます。

..  list-table:: YAESS実行時のシステムプロパティ
    :widths: 10 15
    :header-rows: 1

    * - 名前
      - 値
    * - ``com.asakusafw.yaess.log.batchId``
      - バッチID

Logback以外のログの仕組みを利用する場合、 ``$ASAKUSA_HOME/yaess/lib`` にあるLogback関連のライブラリを置換した上で、
設定ファイルを ``$ASAKUSA_HOME/yaess/conf`` などに配置します (ここは実行時にクラスパスとして設定されます)。


..  attention::
    YAESSから起動されるHadoopや、ThunderGate、WindGateなどは、それぞれのログ設定を利用します。
    ここでの設定は、あくまでYAESS本体のみのものです。

..  [#] http://www.slf4j.org/
..  [#] http://logback.qos.ch/

プラグインライブラリの管理
~~~~~~~~~~~~~~~~~~~~~~~~~~
YAESSのいくつかの機能を利用するには、追加のプラグインライブラリが必要になる場合があります 。
そのような機能を利用する場合、必要なライブラリを ``$ASAKUSA_HOME/yaess/plugin`` ディレクトリ直下に配置してください。

..  note::
    各セクションに直接指定するクラス名が ``com.asakusafw.yaess.basic.Basic`` から始まるものについては、追加のプラグインライブラリは不要です。

YAESSによるバッチの実行
=======================
YAESSの `プロファイルセット`_ を作成し終えたら、それを利用してバッチアプリケーションを実行します。

バッチアプリケーションの配備
----------------------------
YAESSを利用してバッチアプリケーションを実行する場合、YAESSを実行する環境上に同アプリケーションを配備する必要があります。
アプリケーションの配備方法は、 :doc:`../administration/deployment-with-windgate` の「開発環境で作成したバッチアプリケーションのデプロイと動作確認」を参照してください。

実行計画の確認
--------------
通常、バッチは複数のジョブフローと、さらに複数のフェーズから構成されています。
バッチがどのような構成になっているかを調べる場合、 ``$ASAKUSA_HOME/yaess/bin/yaess-explain.sh <YAESSスクリプトのパス>`` と入力します。

なお、YAESSスクリプトのパスは、通常 ``$ASAKUSA_HOME/batchapps/<バッチID>/etc/yaess-script.properties`` です。
また、アプリケーションの配置前であれば、 ``<コンパイラの出力先ディレクトリ>/<バッチID>/etc/yaess-script.properties`` を指定してください。

このコマンドは、バッチの構造をフェーズの単位まで分解して、JSON形式で表示します。
以下はコマンドの出力結果の例です。

..  code-block:: javascript

    {
      "id": "ex",
      "jobflows": [
        {
          "id": "ex",
          "blockers": [],
          "phases": [
            "setup",
            "import",
            "main",
            "epilogue",
            "export",
            "finalize",
            "cleanup"
          ]
        }
      ]
    }

JSONオブジェクトのトップレベルはバッチ全体を表していて、以下のような構造になっています。

..  list-table:: 実行計画の構造 (バッチ)
    :widths: 10 40
    :header-rows: 1

    * - 名前
      - 値
    * - ``id``
      - バッチID
    * - ``jobflows``
      - バッチ内のジョブフローの一覧

また、それぞれのジョブフロー ( ``jobflows`` ) は以下のような構造になっています。

..  list-table:: 実行計画の構造 (ジョブフロー)
    :widths: 10 60
    :header-rows: 1

    * - 名前
      - 値
    * - ``id``
      - フローID
    * - ``blockers``
      - このジョブフローの実行の前提となるジョブフローのID一覧
    * - ``phases``
      - このジョブフローに含まれるフェーズ一覧

さらに、それぞれのフェーズ ( ``phases`` ) には以下のようなものがあります。

..  list-table:: 実行計画の構造 (フェーズ)
    :widths: 10 60
    :header-rows: 1

    * - 名前
      - 処理内容
    * - ``setup``
      - ジョブフローの実行環境をセットアップする [#]_
    * - ``initialize``
      - ジョブフローの処理内容を初期化する
    * - ``import``
      - ジョブフローの処理に必要なデータを外部システムからインポートする
    * - ``prologue``
      - インポートしたデータを本処理用に加工する
    * - ``main``
      - Hadoopジョブなどの本処理を行う
    * - ``epilogue``
      - 本処理の結果をエクスポート用に加工する
    * - ``export``
      - ジョブフローの処理結果を外部システムにエクスポートする
    * - ``finalize``
      - ジョブフローの処理内容を完了またはロールバックさせる
    * - ``cleanup``
      - ジョブフローの実行環境をクリーンアップアップする

以上のフェーズがジョブフロー内で上から順に行われる可能性があり、実行計画には実際に行うフェーズのみが表示されます。


..  note::
    上記のフェーズ一覧と処理内容はあくまで概要で、これに即した処理が行われるとは限りません。

..  [#] 今のところ利用されていません


バッチ全体の実行
----------------
バッチアプリケーション全体を実行するには、コマンドラインから ``$ASAKUSA_HOME/yaess/bin/yaess-batch.sh <バッチID>`` と入力します。

..  code-block:: sh

    asakusa@asakusa:~$ $ASAKUSA_HOME/yaess/bin/yaess-batch.sh ex
    Starting YAESS
       Profile: /home/asakusa/asakusa/yaess/bin/../conf/yaess.properties
        Script: /home/asakusa/asakusa/batchapps/ex/etc/yaess-script.properties
      Batch ID: ex
    ...
    Finished: SUCCESS

出力の最後に ``Finished: SUCCESS`` と表示されればバッチ処理は成功です。
このバッチ処理の結果はコマンドの終了コードでも確認できます。
YAESSではUnixの方式に従い、正常終了の場合は ``0`` , それ以外の場合は ``0`` でない終了コードを返します。

また、バッチに起動引数を指定する場合、コマンドラインの末尾に ``-A <変数名>=<値>`` のように記述します。
複数の起動引数を指定する場合には、スペース区切りで繰り返します。

以下はコマンドラインの例です。

..  code-block:: sh

    $ASAKUSA_HOME/yaess/bin/yaess-batch.sh ex -A date=2011-03-31 -A code=123


なお、各ジョブフローの ``initialize`` フェーズから ``finalize`` フェーズまでに例外が発生した場合、
YAESSは即座に ``finalize`` フェーズの実行を試みた後、バッチの実行を異常終了させます。
``finalize`` フェーズではアプリケーションが不安定にならないようにロールバックなどの処理が行われますが、
ここでも失敗した場合には `フェーズ単位の実行`_ で ``finalize`` フェーズを個別に実行する必要があります。


フェーズ単位の実行
------------------
バッチをフェーズ単位で部分的に実行するには、コマンドラインから ``$ASAKUSA_HOME/yaess/bin/yaess-phase.sh <バッチID> <フローID> <フェーズ名> <実行ID>`` と入力します。
また、 `バッチ全体の実行`_ と同様に、 ``-A <変数名>=<値>`` という形式で引数をいくつも指定できます。

それぞれの値は次のような意味を持ちます。

バッチID
    バッチのID。
    Asakusa DSL内で ``@Batch(name = "...")`` [#]_ として指定した名前を利用する。
フローID
    ジョブフローのID。
    Asakusa DSL内で ``@JobFlow(name = "...")`` [#]_ として指定した名前を利用する。
フェーズ名
    ジョブフロー内のフェーズ名。
    バッチ全体を実行する場合には上記をジョブフローごとに順番に実行する。
    ジョブフローの途中で処理が失敗した場合には、 ``finalize`` を実行してから終了する。
実行ID
    ジョブフローの実行ごとのID。
    ワーキングディレクトリの特定や、ロングランニングトランザクションのIDとして利用する。
    同じジョブフローのそれぞれのフェーズで同じものを利用する必要があるが、
    同じジョブフローでも実行のたびに異なるものを指定する必要がある。

上記のうち実行IDを除いては、 `実行計画の確認`_ のものと同様です。

..  note::
    `フェーズ単位の実行`_ 機能は、ほかのジョブ管理システムとの連携を企図しています。
    そのため、バッチ全体を手動で実行する場合には、基本的に `バッチ全体の実行`_ を行ってください。

..  attention::
    フェーズ単位でバッチを実行する場合、 `同一環境上のバッチ実行を抑制するロック`_ が実行のたびに取得され、実行終了時に開放されます。
    実行と実行の間にほかのバッチに割り込まれてしまう可能性がありますので、これより上位の仕組みでの排他制御が必要になるかもしれません。


..  [#] ``com.asakusafw.vocabulary.batch.Batch``
..  [#] ``com.asakusafw.vocabulary.flow.JobFlow``
