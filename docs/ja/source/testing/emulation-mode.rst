==================================================
エミュレーションモードによるアプリケーションテスト
==================================================

この文書では、エミュレーションモードを利用したアプリケーションのテストについて説明します。

エミュレーションモード
======================
エミュレーションモードを有効にしてAsakusa DSLのテストを実行すると、Asakusa Frameworkが提供するラッパー機構を利用してHadoopの処理を実行します。

エミュレーションモードではテストを実行しているプロセス内でほとんどの処理が行われ、デバッグモードのブレークポイントなどを利用できるようになります。

..  attention::
    本機能はアプリケーションプロジェクトのHadoopライブラリを利用するため、標準で設定されたものと異なるHadoopディストリビューションやバージョンを利用する際に、正しく動かない可能性があります。

..  note::
    エミュレーションモードを有効にしていない場合、テスト実行時にコマンドラインインターフェースを利用して、別プロセスで様々な処理を行います。
    
    別プロセスで動作させたほうが Java VM 上の問題は起こりにくくなるため、
    エミュレーションモード利用時に正しく動かない場合には、本機能を無効化して動作を確認してみることを推奨します。

フローDSL/バッチDSLのテスト
---------------------------
エミュレーションモードを有効にして :ref:`データフローのテスト <testing-userguide-dataflow-test>` を行うと、IDEからブレークポイントを指定してデータフロー内の演算子メソッドの動作を確認したり、カバレッジツールと連携して演算子メソッドのテストカバレッジを確認しやすくなります。

インテグレーションテスト
------------------------
:ref:`バッチテストランナー <testing-userguide-integration-test>` とエミュレーションモードを併用すると、インテグレーションテスト時のデバッグ作業がやりやすくなります。

エミュレーションモードの利用方法
================================

エミュレーションモードで利用するモジュール
------------------------------------------
エミュレーションモード用のモジュールはAsakusa FrameworkのMavenリポジトリに以下の内容で登録されています。

..  list-table:: エミュレーションモードで使用するMavenアーティファクト
    :widths: 2 4 5
    :header-rows: 1

    * - グループID
      - アーティファクトID
      - 説明
    * - ``com.asakusafw``
      - ``asakusa-test-inprocess``
      - テストドライバ実行をエミュレーションモードに変更
    * - ``com.asakusafw``
      - ``asakusa-windgate-test-inprocess``
      - :doc:`WindGate <../windgate/index>` をエミュレーションモードで実行 [#]_

..  [#] 通常の場合、WindGateをエミュレーションモードで動作させる必要はありません。 ``DataModelStreamSupport`` [#]_ や ``DataModelJdbcSupport`` [#]_ などの動作を確認したい場合のみ、本アーティファクトを利用してください。

..  [#] :javadoc:`com.asakusafw.windgate.core.vocabulary.DataModelStreamSupport`
..  [#] :javadoc:`com.asakusafw.windgate.core.vocabulary.DataModelJdbcSupport`

アプリケーションプロジェクトの設定
----------------------------------
Gradleプロジェクトでエミュレーションモードを使用する場合は
``build.gradle`` の ``dependencies`` ブロック内に ``testRuntime`` 依存関係(コンフィグレーション)に対して
依存定義を追加します。

..  code-block:: groovy

    dependencies {
        ...
        testRuntime group: 'com.asakusafw', name: 'asakusa-test-inprocess', version: asakusafw.asakusafwVersion

Gradle上でのテストドライバ実行
------------------------------
`アプリケーションプロジェクトの設定`_ を行った状態で Gradleの ``test`` タスクを実行すると、
テストドライバがエミュレーションモードで実行されます。

..  tip::
    エミュレーションモードを有効にして Gradle上でテストを実行すると、
    Gradleが提供する `JaCoCo Plugin <http://www.gradle.org/docs/current/userguide/jacoco_plugin.html>`_ などの
    ソースコードカバレッジ取得機能との連携が可能になります。

Eclipse上でのテストドライバ実行
-------------------------------
`アプリケーションプロジェクトの設定`_ を行った状態で Gradleの ``eclipse`` タスクを実行すると、
Eclipse上でアプリケーションプロジェクトに対してエミュレーションモードが有効になります。

この状態でEclipseからテストドライバを利用するテストクラスや、バッチテストランナーを実行すると、
テストドライバがエミュレーションモードで実行されます。

..  tip::
    エミュレーションモードを有効にすると、
    テストドライバを使ったテストクラスのデバッグ実行時に
    Eclipseのブレークポイント機能などを利用できます。
